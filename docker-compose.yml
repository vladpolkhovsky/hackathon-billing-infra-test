services:

  nginx:
    image: nginx:latest
    #ВАЖНО: указать переменные из темплейта
    command: /bin/bash -c "envsubst '$${DOMAIN} $${FRONT_UPSTREAM} $${BILLING_UPSTREAM} $${TELEMETRY_UPSTREAM}' \
      < /etc/nginx/conf.d/default.conf.template \
      > /etc/nginx/conf.d/default.conf \
      && nginx -g 'daemon off;'"
    env_file:
      - .env
    volumes:
      # Это темплейт, и он будет перзаписан в /etc/nginx/conf.d/default.conf
      - ./nginx/nginx.tmpl.conf:/etc/nginx/conf.d/default.conf.template
    environment:
      TZ: Europe/Moscow
    ports:
      - "8080:80"
      - "443:443"
    restart: always

  backend:
    build:
      context: ./java-backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      server.port: 8090
      management.server.port: 9090
      server.domain: ${DOMAIN}
      cors.allowed.origins: http://backend:8090,http://localhost:5173,http://frontend:80
      spring.datasource.url: jdbc:postgresql://postgres:5432/billing
      spring.datasource.username: postgres
      spring.datasource.password: postgres
    ports:
      - "8090:8090"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9090/actuator/health/liveness" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      liquibase:
        condition: service_completed_successfully

  metrics-collector:
    build:
      context: ./metrics-collector
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: billing
      DB_USER: postgres
      DB_PASSWORD: postgres
      PROMETHEUS_URL: http://host.docker.internal:9090
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8081/api/telemetry/health/liveness" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      liquibase:
        condition: service_completed_successfully

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    ports:
      - "9011:80"
    restart: always

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    command: -c 'max_connections=500'
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      TZ: Europe/Moscow
    healthcheck:
      interval: 10s
      retries: 10
      start_period: 45s
      test: pg_isready -U postgres
      timeout: 10s
    ports:
      - "6000:5432"
    restart: unless-stopped
    volumes:
      - ./postgres/pg-init-db.sql:/docker-entrypoint-initdb.d/postgres-init.sql
      - pgdata:/var/lib/postgresql/data:rw

  liquibase:
    build:
      context: ./liquibase
      dockerfile: Dockerfile
    entrypoint: [ "liquibase", "update" ]
    environment:
      LIQUIBASE_COMMAND_URL: jdbc:postgresql://postgres:5432/billing
      LIQUIBASE_COMMAND_USERNAME: postgres
      LIQUIBASE_COMMAND_PASSWORD: postgres
      LIQUIBASE_COMMAND_CHANGELOG_FILE: master.xml
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pgdata: { }
